<?php
/**
 * @ver 1.0
 * @order 10
 */
class datacapture {
  public $core;
  private $_path = false;
  private $_folders;
  private $_movies;
  private $_series;
  private $_other;
  private $_types = array('movies', 'series', 'other');
  private $_extensions = array('video' => array('avi', 'mkv', 'mp4', 'ogm', 'wmv'), 'subtitle' => array('sub', 'srt'));

  public function __construct() {
    global $core;
    $this->core = $core;

    $this->core->defines('LOADED_DIRECTORY', true);

    if (is_dir('/home/0common')) {
      $this->_path = '/home/0common/Media';
    }
  }

  public function _folders() {
    return $this->_folders;
  }

  public function _get_type($type) {
    if ($type && isset($this->{'_'.$type})) {
      return $this->{'_'.$type};
    }
    return false;
  }

  public function get_drives() {
    $try = array();
    if ($this->_path) {
      $try[] = $this->_path;
      $this->_path = '/home/0external';
      if (is_dir($this->_path)) {
        if ($d = @dir($this->_path)) {
          while (false !== ($entry = $d->read())) {
            if (!in_array($entry, array('.', '..'))) {
              $try[] = $this->_path.$entry;
            }
          }
        }
      }
    } else {
      for($d = 'C'; $d <= 'Z'; $d++) {
        $try[] = $d.':';
      }
    }

    if (count($try)) {
      foreach($try as $path) {
        if (is_dir($path)) {
          if (is_dir($path.'/Movies/')) {
            $config = false;
            if (file_exists($path.'/.config')) {
              $config = $this->core->get_config($path.'/.config');
            }
            $this->_folders->movies[] = $this->core->array_to_object(
              array(
                'folder' => $path.'/Movies/',
                'structure' => ($config && isset($config->structure)) ? $config->structure->movies : 'default',
              )
            );
          }
          if (is_dir($path.'/Series/')) {
            $this->_folders->series[] = $this->core->array_to_object(
              array(
                'folder' => $path.'/Series/',
              )
            );
          }
          if (is_dir($path.'/Downloads/')) {
            $this->_folders->other[] = $this->core->array_to_object(
              array(
                'folder' => $path.'/Downloads/',
              )
            );
          }
        }
      }
    }
    return $this;
  }

  public function get_structure($limit_type = false, $limit_folder = false) {
    if (count($this->_folders)) {
      foreach($this->_folders as $type => $dir) {
        if (!$limit_type || ($limit_type && ((is_array($limit_type) && in_array($type, $limit_type)) || ($type == $limit_type)) )) {
          foreach($dir as $folder) {
            if (!$limit_folder || ($limit_folder && ((is_array($limit_folder) && in_array($folder->folder, $limit_folder)) || ($folder->folder == $limit_folder)) )) {
              switch($type) {
                case IMDB_M:
                  $structure = isset($folder->structure) ? $folder->structure : false;
                  if ($structure == 'a-z') {
                    for($d = 'A'; $d <= 'Z'; $d++) {
                      if ($d == 'A' && is_dir($folder->folder.'0-9')) {
                        $this->get_folders($type, $folder->folder.'0-9');
                      }
                      if (is_dir($folder->folder.$d)) {
                        $this->get_folders($type, $folder->folder.$d);
                      }
                    }
                  } else {
                    $this->get_folders($type, $folder->folder);
                  }
                break;
                case IMDB_S:
                  $this->get_folders($type, $folder->folder);
                break;
                case IMDB_O:
                  $this->get_folders($type, $folder->folder);
                break;
              }
            }
          }
        }
      }
    }
    return $this;
  }

  private function get_folders($type, $dir) {
    if ($d = @dir($dir)) {
      while (false !== ($entry = $d->read())) {
        if (substr($entry, 0, 1) != '.') {
          if (is_dir($dir.$entry)) {
            $this->{'_'.$type}[] = $this->folder_object($dir.$entry, $entry);
          } else {
            $this->{'_'.$type}[] = $this->file_object($type, $dir.$entry, $entry);
          }
        }
      }
    }
    return $this;
  }

  private function get_files($type = false, $folder = false) {
    foreach($this->_types as $_type) {
      if (!$type || ($type && $_type == $type)) {
        foreach($this->{'_'.$_type} as $key => $value) {

        }
      }
    }
    return $this;
  }

  private function _files($type, $dir, $title) {
    $files = array();
    if ($d = @dir($dir)) {
      while (false !== ($entry = $d->read())) {
        if (substr($entry, 0, 1) != '.') {
          if (is_dir($dir.$entry)) {
            $files[$entry] = $this->_files($type, $dir.$entry.'/', $title);
          } else {
            $files[] = $this->file_object($type, $dir.$entry, $entry);
          }
        }
      }
    }
    return $files;
  }

  private function folder_object($folder, $title) {
    $object = array(
      'folder' => true,
      'path' => $folder,
      'title' => $title,
    );
    return $object;
  }

  private function file_object($type, $folder, $file) {
    $object = array(
      'folder' => false,
      'path' => $folder,
      'file' => $file,
      'hash' => $this->get_file_hash($folder),
      'valid' => $this->check_file($type, $file),
    );
    return $object;
  }

  private function get_info() {
    $getID3 = new getID3();
    (in_array($this->check_file($type, $entry), array(0, 1))) ? $this->core->array_to_object($getID3->format_analyze($dir.'/'.$entry)) : '';
  }

  public function get_file_hash($file) {
    $hash = false;
    if (file_exists($file)) {
      $handle = fopen($file, 'rb');
      $file_data = md5(fread($handle, 4096));
      fclose($handle);
      $hash = md5(filesize($file).$file_data);
    }
    return $hash;
  }

  private function check_file($type, $file) {
    $valid = -1;
    $ext = pathinfo($file, PATHINFO_EXTENSION);
    if (in_array($ext, $this->_extensions['video'])) {
      switch($type) {
        case IMDB_M:
          $valid = preg_match('/^([a-zA-Z0-9\ -]+)(\.[a-z]{3,4})$/', $file);
        break;
        case IMDB_S:
          $valid = preg_match('/^([a-zA-Z0-9\ ]+)(\ -\ )(S[0-9][0-9]E[0-9][0-9])(\ -\ )?([a-zA-Z0-9\ ]+)?(\.[a-z]{3,4})$/', $file);
        break;
        case IMDB_O:
          $valid = preg_match('/^([a-zA-Z0-9\ -]+)(\.[a-z]{3,4})$/', $file);
          if (!$valid) {
            $valid = preg_match('/^([a-zA-Z0-9\ ]+)(\ -\ )(S[0-9][0-9]E[0-9][0-9])(\ -\ )?([a-zA-Z0-9\ ]+)?(\.[a-z]{3,4})$/', $file);
          }
        break;
      }
    } else if (in_array($ext, $this->_extensions['subtitle'])) {
      $valid = 2;
    }

    return $valid;
  }

  public function convert_filesize($size, $format = 'KB') {
    $formats = array('B', 'KB', 'MB', 'GB', 'TB');
    $round = array('B', 'KB', 'MB');
    $convert = false;
    $type = $formats[0];
    foreach($formats as $key => $val) {
      if ($val == $format) {
        $convert = true;
      }
      if ($convert) {
        if ($size > 1024) {
          $type = $val;
          if (in_array($val, $round)) {
            $size = round($size/1024);
          } else {
            $size = round($size/1024, 2);
          }
        } else {
          break;
        }
      }
    }
    return $size.$type;
  }
}
?>
<?php
/**
 * @ver 1.0
 * @order 10
 */
class core {
  public $_files;
  public $_links;
  public $_definitions;
  
  public function __construct() {
    $this->defines('LOADED_CORE', true);
    
    $this->load_config(SERVER_ROOT.'config.ini');
  }

  public function get_config($config) {
    $config = $this->array_to_object(parse_ini_file($config, true));
    return $config;
  }

  public function load_config($config) {
    if ($config) {
      if (file_exists($config)) {
        $config = $this->get_config($config);
        $this->define_config($config);
        $this->_files = $this->get_files($config);
        $this->_links = $this->get_links($config);
        return true;
      }
    }
    return false;
  }
  
  private function define_config($config) {
    if (isset($config->define) && count($config->define) > 0) {
      foreach($config->define as $key => $val) {
        $define = '';
        eval("\$define = $val;");
        $this->defines($key, $define);
      }
    }
  }

  public function defines($key, $define) {
    $this->_definitions->$key = $define;
    if (!defined($key)) {
      define($key, $define);
    }

    return true;
  }

  public function redefine() {
    if (count($this->_definitions) > 0) {
      foreach ($this->_definitions as $key => $define) {
        if (!defined($key)) {
          define($key, $define);
        }
      }
    }
  }
  
  private function get_files($config) {
    $files = $this->_files;
    if (isset($config->files) && count($config->files) > 0) {
      foreach($config->files as $key => $val) {
        $files->$key = $val;
      }
    }
    return $files;
  }
  
  private function get_links($config) {
    $links = $this->_links;
    if (isset($config->links) && count($config->links) > 0) {
      foreach($config->links as $key => $val) {
        $links->$key = $val;
      }
    }
    return $links;
  }

  public function array_to_object($array = array()) {
    if (!empty($array)) {
      $data = false;
      foreach ($array as $akey => $aval) {
        if (is_array($aval)) {
          $data->{$akey} = $this->array_to_object($aval);
        } else {
          $data->{$akey} = $aval;
        }
      }
      return $data;
    }
    return false;
  }
  
  public function object_to_array($object = false) {
    if (!empty($object)) {
      $data = false;
      foreach ($object as $okey => $oval) {
        if (is_object($oval)) {
          $data[$okey] = $this->object_to_array($oval);
        } else {
          $data[$okey] = $oval;
        }
      }
      return $data;
    }
    return false;
  }

  public function set_session($type, $data, $clear = false) {
    if (!isset($_SESSION)) {
      session_start();
    }
    if ($clear) {
      unset($_SESSION[SESSION][$type]);
    }
    $_SESSION[SESSION][$type][] = $data;
  }

  public function get_session($type, $clear = false) {
    if (!isset($_SESSION)) {
      session_start();
    }

    $session = (isset($_SESSION[SESSION][$type])) ? $_SESSION[SESSION][$type] : false;

    if ($clear) {
      unset($_SESSION[SESSION][$type]);
    }

    return $session;
  }

  public function error($text) {
    $this->set_session('error', $text);
    return false;
  }

  public function has_errors() {
    return (bool) $this->get_session('error');
  }
  
  public function get_errors() {
    return $this->get_session('error', true);
  }
  
  public function parse($start = false, $end = false, $data) {
    $start_pos = ($start) ? (strpos($data, $start)+strlen($start)) : 0;
    $data = substr($data, $start_pos);
    $end_pos = ($end) ? strpos($data, $end) : strlen($data);
    
    return substr($data, 0, $end_pos);
  }

  public static function get_file_comments($_file) {
    $comments = (object) array('ver' => '1.0');
    if (file_exists($_file)) {
      $source = file_get_contents($_file);
      $tokens = token_get_all($source);
      if ($tokens) {
	      foreach ($tokens as $token) {
		      //if (in_array($token[0], array(367, 365, 310, 311, 366))) {
		      // Searches by token Name. This will eliminate problem of different systems. I hope :)
		      if(is_numeric($token[0])){
						if (in_array(token_name($token[0]), array("T_DOC_COMMENT"))) {
							preg_match_all('/(@)(.[^ ]*)( )(.[^\n]*)/', $token[1], $matches);
							if ($matches) {
								foreach($matches[2] as $key => $val) {
									$value = trim($matches[4][$key]);
									$value = ((strtolower(strtolower($value)) === 'true') ? true : ((strtolower(strtolower($value)) === 'false') ? false : $value));
									$comments->$val = $value;
								}
							}
						}
		      }
        }
      }
    }
    return $comments;
  }
  
  public function get_file_name($file) {
    $file = pathinfo($file, PATHINFO_FILENAME);
    $file = str_replace("_", " ", $file);
    $file = ucwords($file);
    
    return $file;
  }

  public function sort_object($object, $dir = false) {
    $array = $this->object_to_array($object);
    if ($dir) {
      krsort($array);
    } else {
      ksort($array);
    }

    return $this->array_to_object($array);
  }

  public function limit_object($object, $from = 0, $to = 0) {
    $array = $this->object_to_array($object);
    $array = array_slice($array, $from, $to, true);
    return $this->array_to_object($array);
  }

  public function get_file_extension($file_name) {
    return substr(strrchr($file_name, '.'), 1);
  }
}
?>
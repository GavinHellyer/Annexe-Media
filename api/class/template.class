<?php
/**
 * @ver 1.0
 * @order 50
 */
class template extends effects {
  private $_full_page;
  private $_current_app;
  private $_current_page;
  private $_current_page_title;
  private $_css;
  private $_js;
  private $_actions;

  public function __construct() {
    parent::__construct();
    $this->defines('LOADED_TEMPLATE', true);
  }

  public function load_base_template() {
    ob_start();
    if (file_exists(SERVER_ROOT.'apps/'.$this->_current_app.'/header.php')) {
      require_once(SERVER_ROOT.'apps/'.$this->_current_app.'/header.php'); echo "\n";
    } else {
      require_once(SERVER_ROOT.'header.php'); echo "\n";
    }
    $this->_full_page->header = ob_get_contents();
    ob_clean();
    if (file_exists(SERVER_ROOT.'apps/'.$this->_current_app.'/footer.php')) {
      require_once(SERVER_ROOT.'apps/'.$this->_current_app.'/footer.php'); echo "\n";
    } else {
      require_once(SERVER_ROOT.'footer.php'); echo "\n";
    }
    $this->_full_page->footer = ob_get_contents();
    ob_end_clean();

    return $this;
  }

  public function execute_template() {
    ob_start();
    require_once(SERVER_ROOT.'apps/'.$this->_current_app.'/'.$this->_current_page.'.php'); echo "\n";
    $this->_full_page->content = ob_get_contents();
    ob_end_clean();
    
    $_SESSION['gva_framework']['_css'] = $this->_css;
    $_SESSION['gva_framework']['_js'] = $this->_js;

    if ($this->has_errors()) {
      printR($this->get_errors());
    }

    echo $this->_full_page->header;
    echo $this->_full_page->content;
    echo $this->_full_page->footer;
  }

  public function set_current_app($app = false) {
    if ($app) {
      if (is_dir(SERVER_ROOT.'apps/'.$app)) {
        $this->_current_app = $app;
        $this->reset_cjs();
        
        if (file_exists(SERVER_ROOT.'apps/'.$this->_current_app.'/config.ini')) {
          $this->load_config(SERVER_ROOT.'apps/'.$this->_current_app.'/config.ini');
          if (defined('APP_TITLE')) {
            $this->set_current_page_title(APP_TITLE);
          } else {
            $this->set_current_page_title(APP_DEFAULT_TITLE);
          }
        }

        if (is_dir(SERVER_ROOT.'apps/'.$this->_current_app.'/class')) {
          $d = dir(SERVER_ROOT.'apps/'.$this->_current_app.'/class');
          $class = array();
          while (false !== ($entry = $d->read())) {
            if (!in_array($entry, array('.', '..'))) {
              $comments = core::get_file_comments(SERVER_ROOT.'apps/'.$this->_current_app.'/class/'.$entry);
              $class[$comments->order] = $entry;
            }
          }
          $d->close();

          ksort($class);
          foreach ($class as $order => $entry) {
            require_once(SERVER_ROOT.'apps/'.$this->_current_app.'/class/'.$entry);
          }
        }
        
        if (defined('SCHEMA')) {
          $this->set_schema(SCHEMA)->open();
        }
        
        return $this;
      }
      $this->error('App Not Found');
      return $this;
    }
    $this->error('Cannot Load Blank App');
    return $this;
  }

  public function set_current_page($page = false) {
    if ($page) {
      if (file_exists(SERVER_ROOT.'apps/'.$this->_current_app.'/'.$page.'.php')) {
        $this->_current_page = $page;
        
        return $this;
      }
      $this->error('Page Not Found');
      return $this;
    }
    $this->error('Cannot Load Blank Page');
    return $this;
  }

  public function set_current_page_title($title = '') {
    $this->_current_page_title = $title;
    return $this;
  }

  public function get_current_page_title() {
    return $this->_current_page_title;
  }

  public function load_cjs($cjs, $type, $item, $file) {
    $this->$cjs->$type->$item = $file;
  }

  public function load_module($module, $args = "") {
    $load_module = $this->_files->modRoot.$module.'/loader.php';
    if (file_exists($load_module)) {
      if (is_array($args)) {
        extract($args);
      }
      if (defined('LOADED_TEMPLATE')) {
        if ($this->check_access($load_module)) {
          $bt = debug_backtrace();
          $indent = $this->get_indent($bt[0]['file'], $bt[0]['line']);

          $comments = $this->get_file_comments($this->_files->modRoot.$module.'/loader.php');

          if (isset($comments->css)) {
            $this->load_cjs('_css', 'mod', $module, $comments->css);
          }

          if (isset($comments->js)) {
            $this->load_cjs('_js', 'mod', $module, $comments->js);
          }

          $module_output = "<!-- Loading Module: ".((isset($comments->module)) ? $comments->module : $module)." v".$comments->ver." -->\n";
          $module_output .= ((isset($comments->description)) ? "<!-- Module Description: ".$comments->description." -->\n" : '');
          $module_output .= require_once($load_module);
          $module_output .= "\n";
          $module_output .= "<!-- Module End: ".((isset($comments->module)) ? $comments->module : $module)." -->\n";

          echo $this->format_output($module_output, $indent);
        } else {
          echo "<!-- Module: ".$module." - Not Loaded -->\n";
        }
      } else {
        echo "<!-- Failed To Load Module: ".$module." - Template Class Not Loaded -->\n";
      }
    }
  }
  
  public function apply_action($action = false, $arg = '') {
    if ($action) {
      if (isset($this->_actions->$action)) {
        $this->_actions->$action = $this->sort_object($this->_actions->$action);
        foreach ($this->_actions->$action as $targets) {
          foreach ($targets as $target) {
            if (function_exists($target->target)) {
              call_user_func($target->target, $target->arg);
            }
          }
        }
      }
      return true;
    }
    return $this->error("Action Cannot Be Blank");
  }
  
  public function add_action($action = false, $target = false, $priority = 10, $arg = '') {
    if ($action && $target) {
      if (!isset($this->_actions->$action->$priority)) {
        $this->_actions->$action->$priority = array();
      }
      $add = $this->_actions->$action->$priority;
      $bt = debug_backtrace();
      $add[] = array('target' => $target, 'arg' => $arg, 'origin' => $this->get_file_name($bt[0]['file']));
      $this->_actions->$action->$priority = $add;
    }
    return $this->error("Action/Target Cannot Be Blank");
  }

  public function apply_template($template, $args = "") {
    if (file_exists($this->_files->tempRoot.$template.'/loader.php')) {
      if (is_array($args)) {
        extract($args);
      }

      $comments = $this->get_file_comments($this->_files->tempRoot.$template.'/loader.php');

      if (isset($comments->css)) {
        $this->load_cjs('_css', 'temp', $template, $comments->css);
      }

      if (isset($comments->js)) {
        $this->load_cjs('_js', 'temp', $template, $comments->js);
      }

      ob_start();
      require_once($this->_files->tempRoot.$template.'/loader.php');
      $content = ob_get_contents();
      ob_end_clean();

      return $content;
    }
    return $this->error("Could Not Load Template");
  }

  function format_output($output, $indent = 1) {
    $ind = $this->convert($indent);
    $output = str_replace("\n", "\n".$ind, $output)."\n";
    $output = preg_replace("/(^[\r\n]*|[\r\n]+)[\s\t]*[\r\n]+/", "\n", $output);
    $output = trim($output)."\n";
    return $output;
  }

  function convert($indent) {
    $ind = '';
    for($i = 0; $i < $indent; $i++) {
      $ind .= IND;
    }
    return $ind;
  }

  function get_indent($file, $line) {
    if (file_exists($file)) {
      $lines = file($file);
      $line = $lines[$line-1];

      preg_match('/^(\s*)/', $line, $indent);

      return ceil(strlen($indent[0])/2);
    }
    return 1;
  }

  public function load_file($file, $id = false, $type = false) {
    $ext = $this->get_file_extension($file);
    switch ($ext) {
      case 'css':
        if (file_exists($this->_files->cssRoot.$file)) {
          $_file_src = $this->_files->css.$file;
          $_file_server = $this->_files->cssRoot.$file;
          echo '<link rel="stylesheet" type="text/css" href="'.$_file_src.'?ver='.$this->get_file_comments($_file_server)->ver.'" media="all"'.(($id) ? ' id="'.str_replace('_', '-', $id).'-css"' : '').'>'."\n";
          break;
        } else if ($type) {
          $typeRoot = $type.'Root';
          if (isset($this->_files->$typeRoot) && file_exists($this->_files->$typeRoot.$file)) {
            $_file_src = $this->_files->$type.$file;
            $_file_server = $this->_files->$typeRoot.$file;
            echo '<link rel="stylesheet" type="text/css" href="'.$_file_src.'?ver='.$this->get_file_comments($_file_server)->ver.'" media="all"'.(($id) ? ' id="'.str_replace('_', '-', $id).'-css"' : '').'>'."\n";
            break;
          }
        }
      case 'js':
        if (file_exists($this->_files->jsRoot.$file)) {
          $_file_src = $this->_files->js.$file;
          $_file_server = $this->_files->jsRoot.$file;
          echo '<script type="text/javascript" src="'.$_file_src.'?ver='.$this->get_file_comments($_file_server)->ver.'"'.(($id) ? ' id="'.str_replace('_', '-', $id).'-js"' : '').'></script>'."\n";
          break;
        } else if ($type) {
          $typeRoot = $type.'Root';
          if (isset($this->_files->$typeRoot) && file_exists($this->_files->$typeRoot.$file)) {
            $_file_src = $this->_files->$type.$file;
            $_file_server = $this->_files->$typeRoot.$file;
            echo '<script type="text/javascript" src="'.$_file_src.'?ver='.$this->get_file_comments($_file_server)->ver.'"'.(($id) ? ' id="'.str_replace('_', '-', $id).'-js"' : '').'></script>'."\n";
            break;
          }
        }
      case 'php':
        if (file_exists($this->_files->incRoot.$file)) {
          require_once($this->_files->incRoot.$file); echo "\n";
          break;
        }
      default:
        $this->error('Cannot Find File: '.$file);
      break;
    }
  }
  
  public function reset_cjs() {
    $this->_css = '';
    $this->_js = '';
  }
  
  public function combine_cjs($_type = false) {
    $this->_css = isset($_SESSION['gva_framework']['_css']) ? $_SESSION['gva_framework']['_css'] : $this->_css;
    $this->_js = isset($_SESSION['gva_framework']['_js']) ? $_SESSION['gva_framework']['_js'] : $this->_js;

    if ($_type) {
      $contents = '';
      $_types = '_'.$_type;
      if ($this->$_types && count($this->$_types) > 0) {
        foreach ($this->$_types as $type => $loader) {
          foreach ($loader as $name => $file) {
            if ($file) {
              if ($type == 'gen') {
                $cjs_file = $this->_files->$_type.'/'.$file;
              } else {
                $cjs = ($file === true) ? (($_type == 'css') ? 'style.css' : 'script.js') : $file;
                $cjs_file = $this->_files->$type.'/'.$name.'/'.$_type.'/'.$cjs;
              }
              if ($_type == 'css') {
                //$contents .= CssMin::minify(file_get_contents($cjs_file))."\n\n";
                $contents .= file_get_contents($cjs_file)."\n\n";
              } else {
                $contents .= file_get_contents($cjs_file)."\n\n";
              }
            }
          }
        }
      }

      return $contents;
    }
    return $this->error('Cannot combine unknown type');
  }
}
?>